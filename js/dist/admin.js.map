{"version":3,"file":"admin.js","mappings":";;;;;;;;;;;;;;AAAmC;AAEnCA,oEAAgB,CAACE,GAAG,CAAC,4BAA4B,EAAE,YAAM;EACvDF,qEAAiB,OAAI,CAAC,qBAAqB,CAAC,CACzCI,eAAe,CAAC;IACfC,OAAO,EAAE,+BAA+B;IACxCC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAEP,kEAAc,CAACS,KAAK,CAAC,8CAA8C,CAAC;IAC3EC,IAAI,EAAEV,kEAAc,CAACS,KAAK,CAAC,8CAA8C,CAAC;IAC1EE,GAAG,EAAE;EACP,CAAC,CAAC,CACDC,kBAAkB,CAAC;IAClBC,UAAU,EAAE,oCAAoC;IAChDN,KAAK,EAAEP,kEAAc,CAACS,KAAK,CAAC,2CAA2C,CAAC;IACxEK,IAAI,EAAE;EACR,CAAC,EAAE,OAAO,CAAC,CACVF,kBAAkB,CAAC;IAClBC,UAAU,EAAE,yCAAyC;IACrDN,KAAK,EAAEP,kEAAc,CAACS,KAAK,CAAC,gDAAgD,CAAC;IAC7EK,IAAI,EAAE;EACR,CAAC,EAAE,UAAU,CAAC;AAClB,CAAC,CAAC;;;;;;;;;;;ACrBF;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@flarum/attached-posts/./src/admin/index.ts","webpack://@flarum/attached-posts/external root \"flarum.core.compat['admin/app']\"","webpack://@flarum/attached-posts/webpack/bootstrap","webpack://@flarum/attached-posts/webpack/runtime/compat get default export","webpack://@flarum/attached-posts/webpack/runtime/define property getters","webpack://@flarum/attached-posts/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/attached-posts/webpack/runtime/make namespace object"],"sourcesContent":["import app from 'flarum/admin/app';\n\napp.initializers.add('xypp/flarum-attached-posts', () => {\n  app.extensionData.for('xypp-attached-posts')\n    .registerSetting({\n      setting: 'xypp-attached-posts.max-lines',\n      type: 'number',\n      label: app.translator.trans('xypp-attached-posts.admin.settings.max-lines'),\n      help: app.translator.trans('xypp-attached-posts.admin.settings.max-lines'),\n      min: 1,\n    })\n    .registerPermission({\n      permission: 'discussion.xypp-attached-posts-use',\n      label: app.translator.trans('xypp-attached-posts.admin.permissions.use'),\n      icon: 'fas fa-paperclip'\n    }, \"start\")\n    .registerPermission({\n      permission: 'discussion.xypp-attached-posts-moderate',\n      label: app.translator.trans('xypp-attached-posts.admin.permissions.moderate'),\n      icon: 'fas fa-paperclip'\n    }, \"moderate\")\n});\n","module.exports = flarum.core.compat['admin/app'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["app","initializers","add","extensionData","registerSetting","setting","type","label","translator","trans","help","min","registerPermission","permission","icon"],"sourceRoot":""}